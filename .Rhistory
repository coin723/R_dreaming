geom_point() +
geom_smooth()
ggplot(data = mpg, aes(displ, hwy)) +
geom_point(position = "jitter") +
geom_smooth()
ggplot(data = mpg, aes(displ, hwy)) +
geom_point(position = "jitter") +
geom_smooth()
ggplot(data = mpg, aes(displ, hwy)) +
geom_point(position = "jitter") +
geom_smooth()
ggplot(data = mpg, aes(displ, hwy)) +
geom_point(position = "jitter") +
geom_smooth()
ggplot(data = mpg, aes(displ, hwy)) +
geom_point(position = "jitter") +
geom_smooth()
ggplot(data = mpg, aes(displ, hwy)) +
geom_point(position = "jitter") +
geom_smooth()
ggplot(mtcars, aes(factor(cyl), fill = factor(vs))) +
geom_bar()
ggplot(mtcars, aes(factor(cyl), fill = factor(vs))) +
geom_bar(position = "stack")
ggplot(mtcars, aes(factor(cyl), fill = factor(vs))) +
geom_bar()
str(mtcars)
?factor
ggplot(mtcars, aes(cyl, vs)) +
geom_bar()
ggplot(mtcars, aes(cyl, fill = vs)) +
geom_bar()
ggplot(mtcars, aes(factor(cyl), fill = vs)) +
geom_bar()
ggplot(mtcars, aes(factor(cyl), fill = factor(vs)) +
geom_bar()
ggplot(mtcars, aes(factor(cyl), fill = factor(vs))) +
geom_bar()
ggplot(mtcars, aes(factor(cyl), fill = factor(vs))) +
geom_bar(position = "stack")
ggplot(mtcars, aes(factor(cyl), fill = factor(vs))) +
geom_bar()
ggplot(mtcars, aes(factor(cyl), vs)) +
geom_bar()
ggplot(mtcars, aes(factor(cyl), fill = factor(vs))) +
geom_bar()
ggplot(mtcars, aes(factor(cyl), factor(vs))) +
geom_bar()
ggplot(mtcars, aes(factor(cyl), fill = factor(vs))) +
geom_bar()
ggplot(mtcars, aes(factor(cyl), fill = factor(vs))) +
geom_point()
ggplot(mtcars, aes(factor(cyl), factor(vs))) +
geom_point()
ggplot(mtcars, aes(cyl, vs)) +
geom_point()
ggplot(mtcars, aes(factor(cyl), fill)) +
geom_bar()
ggplot(mtcars, aes(factor(cyl), fill = factor(vs))) +
geom_bar()
?fill
ggplot(mtcars, aes(factor(cyl), colour = factor(vs))) +
geom_point()
ggplot(mtcars, aes(factor(cyl), factor(vs), colour = factor(vs))) +
geom_point()
ggplot(mtcars, aes(factor(cyl))) +
geom_bar()
ggplot(mtcars, aes(factor(cyl), fill = c(0,1))) +
geom_bar()
ggplot(mtcars, aes(factor(cyl), fill = c('0','1'))) +
geom_bar()
ggplot(mtcars, aes(factor(cyl), fill = factor(0:1))) +
geom_bar()
ggplot(mtcars, aes(factor(cyl), fill = factor(vs))) +
geom_bar()
c(1:10).length
??length
length(mtcars$vs)
ggplot(mtcars, aes(factor(cyl), fill = factor(1:32))) +
geom_bar()
ggplot(mtcars, aes(factor(cyl))) +
geom_bar()
ggplot(mtcars, aes(factor(cyl), fill = factor(1:32))) +
geom_bar()
ggplot(mtcars, aes(factor(cyl), fill = factor(1:length(mtcars$vs)))) +
geom_bar()
ggplot(mtcars, aes(factor(cyl), fill = factor(vs))) +
geom_bar(position = "stack")
ggplot(mtcars, aes(factor(cyl), fill = factor(vs))) +
geom_bar(position = "fill")
ggplot(mtcars, aes(factor(cyl), fill = factor(vs))) +
geom_bar(position = "dodge")
?mtcars
ggplot(diamonds, aes(clarity, fill = cut)) +
geom_bar()
str(diamonds$clarity)
dia_bar <- ggplot(diamonds, aes(x = cut, fill = cut)) + geom_bar()
dia_bar + scale_fill_brewer()
RColorBrewer::display.brewer.all()
dia_bar + scale_fill_brewer(pallette = 'Accent')
dia_bar + scale_fill_brewer(palette = 'Accent')
dia_bar + scale_fill_brewer(palette = 'paired')
dia_bar + scale_fill_brewer(palette = 'Paired')
dia_bar + scale_fill_brewer(palette = 'Accent')
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_smooth() +
scale_x_continuous(limits = c(4,6))
dia_bar +
scale_fill_brewer(palette = 'Accent') +
scale_x_continuous(trans = "log10")
dia_bar +
scale_fill_brewer(palette = 'Accent') +
scale_y_continuous(trans = "log10")
dia_bar +
coord_polar()
dia_bar +
coord_flip()
dia_bar +
coord_polar()
mtc_point <- ggplot(mtcars, aes(mpg, wt)) + geom_point()
mtc_point +
facet_wrap(~cyl)
mtc_point +
facet_wrap(~cyl+gear, ncol = 2)
mtc_point +
facet_grid(gear ~ cyl
mtc_point +
facet_grid(gear ~ cyl)
mtc_point +
facet_grid(gear ~ cyl)
mtc_point +
facet_wrap(~cyl + gear, ncol = 2)
mtc_point +
facet_grid(gear ~ cyl)
ggplot(iris, aes(Sepal.Width, Sepal.Length)) +
geom_point() +
facet_wrap(~Species)
ggplot(iris, aes(Sepal.Width, Sepal.Length)) +
geom_point() +
facet_wrap(~Species, ncol=2)
ggplot(iris, aes(Sepal.Width, Sepal.Length)) +
geom_point() +
facet_wrap(~Species)
mtc_point +
facet_wrap(~cyl + gear, ncol = 2)
ggplot(iris, aes(Sepal.Width, Sepal.Length)) +
geom_point() +
facet_wrap(~Species)
mtc_point +
facet_grid(gear ~ cyl)
dia_bar + theme_bw()
dia_bar + theme_classic()
install.packages('ggthemes')
library(ggthemes)
dia_bar + theme_economist() + scale_colour_economist()
dia_bar + theme_excel()
dia_bar + theme_solarized()
?facet
?facet_grid
mtc_point +
facet_grid(gear ~ cyl)
score <- read.csv('score_data.csv', encoding = 'utf-8')
colnames <- c("X1", "X2", "X3", "y")
score[is.na(score)] <- 0
sample <- score[sample(nrow(score), 50)]
sample <- score[sample(nrow(score), 50),]
?nrow
?sample
mean(sample)
mean(score$X1)
colnames(score) <- c("X1", "X2", "X3", "y")
mean(score$X1)
var(score$X1)
sd(score$X1)
se = function(x) sd(x) / sqrt(length(x))
se(score$X1)
plot(density(score$X1))
?density
qqnorm(score$X1); qqline(score$X1)
?qqnorm
qqnorm(score$X1);
qqline(score$X1)
summary(score$X1)
boxplot(score$X1)
mean(sample$X1)
sample <- score[sample(nrow(score), 50),]
mean(sample$X1)
colnames(score) <- c("X1", "X2", "X3", "y")
score[is.na(score)] <- 0
sample <- score[sample(nrow(score), 50),]
mean(sample$X1)
plot(density(sample$X1))
t.test(sample$X1, mu = mean(score$X1))
nrow(score$X1)
nrow(score)
?t.test
#it suggests that the observed data are inconsistent with the assumption that the null hypothesis is true and thus that hypothesis must be rejected (but this does not automatically mean the alternative hypothesis can be accepted as true).
x <- 1:10; y <- x^2
cor(x y)
cor(x, y)
cor(attitude, method = "pearson", use = "pairwise.complete.obs")
pairs(attitude)
?attitude
cor.test(attitude$complaints, attitude$learning)
cor.test(attitude$complaints, attitude$critical)
plot(attitude$complaints, attitude$learning)
cars <- data.frame(cars)
out = lm(dist ~ speed, data = cars)
summary(out)
out <- lm(dist ~ speed, data = cars)
summary(out)
plot(dist ~ speed, data = cars);
abline(out, col = "red")
?lm
str(out)
cars <- data.frame(cars)
score <- read.csv('score_data.csv', encoding = 'utf-8')
?score
score
out <- lm(final ~ mid, data = score)
score[is.na(score)] <- 0
out <- lm(final ~ mid, data = score)
summary(out)
plot(final ~ mid, data = score)
abline(out, col = "red")
?rbind
m <- cbind(1, 1:7) # the '1' (= shorter vector) is recycled
m
m <- NULL
m
m <- cbind(1, 1:7)
m
m <- cbind(m, 8:14)[, c(1, 3, 2)]
m
?fromJSON
library(rvest)
?paste0
getMovieInfo <- function(movieCd, key = '09e141d53580865783ee2261d2958418') {
fetched <-
paste0(
'http://www.kobis.or.kr/kobisopenapi/webservice/rest/movie/searchMovieInfo.xml?
key=', key, '&movieCd=', movieCd)
return(URLencode(fetched))
}
temp <- getMovieInfo('20148846')
temp
getMovieInfo <- function(movieCd, key = '09e141d53580865783ee2261d2958418') {
restURL <-
'http://www.kobis.or.kr/kobisopenapi/webservice/rest/movie/searchMovieInfo.xml?'
fetched <-
paste0(restURL, key, '&movieCd=', movieCd)
return(URLencode(fetched))
}
temp <- getMovieInfo('20148846')
temp
getMovieInfo <- function(movieCd, key = '09e141d53580865783ee2261d2958418') {
restURL <-
'http://www.kobis.or.kr/kobisopenapi/webservice/rest/movie/searchMovieInfo.xml?'
fetched <-
paste0(restURL, 'key=', key, '&movieCd=', movieCd)
return(URLencode(fetched))
}
temp <- getMovieInfo('20148846')
temp
tempXML <- xml(temp)
library(maps)
install.packages('maps')
library(maps)
library(ggplot2)
asia = map_data('world', region = c('Japan', 'China', 'North Korea', 'South Korea'))
ggplot(asia, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = 'white', colour = 'black')
ggplot(asia, aes(x = long, y = lat, group = group)) +
geom_polygon(fil = 'white', colour = 'black') +
coord_map()
install.packages('mapproj')
library(mapproj)
ggplot(asia, aes(x = long, y = lat, group = group)) +
geom_polygon(fil = 'white', colour = 'black') +
coord_map()
ggplot(asia, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = 'white', colour = 'black') +
coord_map()
ggplot(asia, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = 'white', colour = 'black') +
coord_map("polyconic")
install.packages('ggmap')
library(ggmap)
install.packages('sp')
library(ggmap)
library(sp)
ggmap_path =
'/private/var/folders/r8/3sydlygj32s3qvqplmg5kzt00000gn/T/Rtmp7x2HQC/downloaded_packages'
install.packages(ggmap_path, repos = NULL, type = "source")
install.packages('ggmap')
'/private/var/folders/r8/3sydlygj32s3qvqplmg5kzt00000gn/T/Rtmp7x2HQC/downloaded_packages/ggmap_2.5.2.tgz'
sp_path = '/private/var/folders/r8/3sydlygj32s3qvqplmg5kzt00000gn/T/Rtmp7x2HQC/downloaded_packages/sp_1.2-0.tar.gz'
install.packages(ggmap_path, repos = NULL, type = "source")
install.packages(/private/var/folders/r8/3sydlygj32s3qvqplmg5kzt00000gn/T/Rtmp7x2HQC/downloaded_packages/ggmap_2.5.2.tgz, repos = NULL, type = "source")
install.packages('/private/var/folders/r8/3sydlygj32s3qvqplmg5kzt00000gn/T/Rtmp7x2HQC/downloaded_packages/ggmap_2.5.2.tgz', repos = NULL, type = "source")
install.packages('/private/var/folders/r8/3sydlygj32s3qvqplmg5kzt00000gn/T/Rtmp7x2HQC/downloaded_packages/sp_1.2-0.tar.gz', repos = NULL, type = "source")
library(ggmap)
install.packages('/private/var/folders/r8/3sydlygj32s3qvqplmg5kzt00000gn/T/Rtmp7x2HQC/downloaded_packages/ggmap_2.5.2.tgz', repos = NULL, type = "source")
library(ggmap)
install.packages('/private/var/folders/r8/3sydlygj32s3qvqplmg5kzt00000gn/T/Rtmp7x2HQC/downloaded_packages/sp_1.2-0.tar.gz', repos = NULL, type = "source")
sudo install.packages('/private/var/folders/r8/3sydlygj32s3qvqplmg5kzt00000gn/T/Rtmp7x2HQC/downloaded_packages/sp_1.2-0.tar.gz', repos = NULL, type = "source")
install.packages('/private/var/folders/r8/3sydlygj32s3qvqplmg5kzt00000gn/T/Rtmp7x2HQC/downloaded_packages/sp_1.2-0.tar.gz', repos = NULL, type = "source")
library(ggmap)
geocode('Seoul', source = 'google')
geocode('Seoul', source = 'google', output = 'latluna')
geocode('Seoul', source = 'google', output = 'latlona')
geocode(enc2utf8('서울'), source = 'google')
geocode(enc2utf8('서울'), source = 'google', output = 'latlona')
geocode(enc2utf8('서울&language=ko'), source = 'google', output = 'latlona')
mutate_geocode(data.frame, address_column_name, source = 'google')
mutate_geocode(data.frame(), address_column_name, source = 'google')
station_list = c()
station_list = c('시청역', '을지로입구역', '을지로3가역', '을지로4가역', '동대문역사문화공원역', '신당역', '상왕십리역', '왕십리역', '한양대역', '뚝섬역', '성수역', '건대입구역', '구의역', '강변역', '잠실나루역', '잠실역', '신천역', '종합운동장역', '삼성역', '선릉역', '역삼역', '강남역', '2호선 교대역', '서초역', '방배역', '사당역', '낙성대역', '서울대입구역', '봉천역', '신림역', '신대방역', '구로디지털단지역', '대림역', '신도림역', '문래역', '영등포구청역', '당산역', '합정역', '홍대입구역', '신촌역', '이대역', '아현역', '충정로역')
station_df = data.frame(statioin_list, stringAsFactors = FALSE)
station_df = data.frame(station_list, stringAsFactors = FALSE)
station_df$station_list = enc2utf8(station_df$station_list)
station_df = data.frame(station_list, stringsAsFactors = FALSE)
station_df$station_list = enc2utf8(station_df$station_list)
station_lonlat = mutate_geocode(station_df, station_list, source = 'google')
qmap('seoul', zoom = 11)
station_lonlat
qmap('seoul', zoom = 11, colour = bw)
qmap('seoul', zoom = 11, colour = 'bw')
qmap('seoul', zoom = 11, color = 'bw')
qmap('seoul', zoom = 11, maptyp = 'roadmap')
qmap('seoul', zoom = 11, maptype = 'roadmap')
qmap('seoul', zoom = 11, maptype = 'satelite')
qmap('seoul', zoom = 11, maptype = 'satellite')
qmap('seoul', zoom = 11, maptype = 'hybrid')
qmap('seoul', zoom = 11, source = 'stamen', maptype = 'watercolor')
qmap('seoul', zoom = 11, source = 'stamen', maptype = 'toner')
seoul_lonlat = unlist(geocode('seoul', source = 'google'))
qmap(seoul_lonlat, zoom = 11, source = 'stamen', maptype = 'toner')
seoul_map <- qmap('Seoul', zoom = 11, source = 'stamen', maptype = 'toner')
seoul_map + geom_point(data = station_lonlat, aes(x = lon, y = lat), colour = 'green',
size = 4)
wifi_data = read.csv('wifi_data.csv', encoding = 'utf-8', stringsAsFactors = FALSE)
getwd()
wifi_data = read.csv('wifi_data.csv', encoding = 'utf-8', stringsAsFactors = FALSE)
seoul_map + geom_point(data = wifi_data, aes(x = lon, y = lat)) + facet_wrap(~div)
?~
d
?facet_wrap
seoul_map +
geom_polygon(data = wifi_data, aes(x = lon, y = lat, fill = ..level..),
stat = 'density2d', alpha = 0.3) +
scale_fill_gradient(low = '#C6DBEF', high = '#08306B') +
facet_wrap(~div)
seoul_map +
geom_polygon(data = wifi_data, aes(x = lon, y = lat, fill = ..level..),
stat = 'density2d', alpha = 0.3) +
facet_wrap(~div)
seoul_map +
geom_polygon(data = wifi_data, aes(x = lon, y = lat, fill = ..level..),
stat = 'density2d', alpha = 0.3) +
scale_fill_gradient(low = '#C6DBEF', high = '#08306B') +
facet_wrap(~div)
wifi_data
str(wifi_data)
?..level..
??..level..
?fill
?geom_polygon
geom_polygon(data = wifi_data, aes(x = lon, y = lat, fill = 'black'),
seoul_map +
geom_polygon(data = wifi_data, aes(x = lon, y = lat, fill = 'black'),
stat = 'density2d', alpha = 0.3) +
scale_fill_gradient(low = '#C6DBEF', high = '#08306B') +
facet_wrap(~div)
a
seoul_map +
geom_polygon(data = wifi_data, aes(x = lon, y = lat, fill = ..level..),
stat = 'density2d', alpha = 0.3) +
scale_fill_gradient(low = '#C6DBEF', high = '#08306B') +
facet_wrap(~div)
seoul_map +
geom_polygon(data = wifi_data, aes(x = lon, y = lat, fill = 'black'),
stat = 'density2d', alpha = 0.3) +
scale_fill_gradient(low = '#C6DBEF', high = '#08306B') +
facet_wrap(~div)
seoul_map +
geom_polygon(data = wifi_data, aes(x = lon, y = lat),
stat = 'density2d', alpha = 0.3) +
scale_fill_gradient(low = '#C6DBEF', high = '#08306B') +
facet_wrap(~div)
seoul_map +
geom_polygon(data = wifi_data, aes(x = lon, y = lat, fill = ..level..),
stat = 'density2d', alpha = 0.3) +
scale_fill_gradient(low = '#C6DBEF', high = '#08306B') +
facet_wrap(~div)
seoul_map +
geom_polygon(data = wifi_data, aes(x = lon, y = lat, fill = ..count..),
stat = 'density2d', alpha = 0.3) +
scale_fill_gradient(low = '#C6DBEF', high = '#08306B') +
facet_wrap(~div)
seoul_map +
geom_polygon(data = wifi_data, aes(x = lon, y = lat, fill = ..level..),
stat = 'density2d', alpha = 0.3) +
scale_fill_gradient(low = '#C6DBEF', high = '#08306B') +
facet_wrap(~div)
str(wifi_data)
?qmap
qmap('seoul', zoom = 11)
?geom_polygon
install.packages('leaflet')
library(leaflet)
leaflet(wifi_data) %>%
setView(lng = seoul_lonlat[1],
lat = seoul_lonlat[2],
zoom = 11) %>%
addTiles() %>%
addCircles(lng = ~lon, lat = ~lat)
leaflet(wifi_data) %>%
setView(lng = seoul_lonlat[1],
lat = seoul_lonlat[2],
zoom = 11) %>%
addTiles() %>%
addCircles(lng = ~lon, lat = ~lat)
leaflet(wifi_data) %>%
setView(lng = seoul_lonlat[1],
lat = seoul_lonlat[2],
zoom = 11) %>%
addTiles()
leaflet(wifi_data) %>%
setView(lng = seoul_lonlat[1],
lat = seoul_lonlat[2],
zoom = 11) %>%
addCircles(lng = ~lon, lat = ~lat)
leaflet(wifi_data) %>%
addTiles() %>%
addCircles(lng = ~lon, lat = ~lat)
leaflet(wifi_data) %>%
setView(lng = seoul_lonlat[1],
lat = seoul_lonlat[2],
zoom = 11) %>%
addTiles() %>%
addCircles(lng = ~lon, lat = ~lat)
?setView
leaflet(wifi_data) %>%
setView(lng = seoul_lonlat[1],
lat = seoul_lonlat[2],
zoom = 11) %>%
addTiles() %>%
addCircles(lng = ~lon, lat = ~lat)
leaflet(wifi_data) %>%
setView(lon = seoul_lonlat[1], lat=seoul_lonlat[2], zoom = 11) %>%
addProviderTiles('StamenToner') %>%
addCircles(lng = ~lon, lat = ~lat)
leaflet(wifi_data) %>%
setView(lng = seoul_lonlat[1], lat=seoul_lonlat[2], zoom = 11) %>%
addProviderTiles('StamenToner') %>%
addCircles(lng = ~lon, lat = ~lat)
setView(lng = seoul_lonlat[1], lat = seoul_lonlat[2], zoom = 11) %>%
leaflet(wifi_data) %>%
setView(lng = seoul_lonlat[1], lat = seoul_lonlat[2], zoom = 11) %>%
addProviderTiles('Stamen.Toner') %>%
addCircles(lng = ~lon, lat = ~lat)
leaflet(wifi_data) %>%
setView(lng = seoul_lonlat[1], lat = seoul_lonlat[2], zoom = 11) %>%
addProviderTiles('CartoDB.Positron') %>%
addCircles(lng = ~lon, lat = ~lat)
leaflet(wifi_data) %>%
setView(lng = seoul_lonlat[1], lat = seoul_lonlat[2], zoom = 11) %>%
addProviderTiles('Stamen.Toner') %>%
addCircles(lng = ~lon, lat = ~lat, popup = ~div)
leaflet(wifi_data) %>%
setView(lng = seoul_lonlat[1], lat = seoul_lonlat[2], zoom = 11) %>%
addProviderTiles('Stamen.Toner') %>%
addCircles(lng = ~lon, lat = ~lat)
leaflet(wifi_data) %>%
setView(lng = seoul_lonlat[1], lat = seoul_lonlat[2], zoom = 11) %>%
addProviderTiles('Stamen.Toner') %>%
addCircles(lng = ~lon, lat = ~lat, popup = ~div)
install.pakcages('networkD3')
install.packages('networkD3')
library(networkD3)
data(MisLinks, MisNodes)
?MisLinks
?MiseNodes
?MisNodes
forceNetwork(Links = MisLinks, Nodes = MisNodes, Source = 'source', Target = 'target',
Value = 'value', NodeID = 'name', Group = 'group', opacity = 0.6)
?data
str(MisLinks)
str(MisNodes)
install.packages('d3heatmap')
library(d3heatmap)
d3heatmap(mtcars, scale = "column", colors = "Blues")
install.packages('DT')
library(DT)
datatable(iris)
forceNetwork(Links = MisLinks, Nodes = MisNodes, Source = 'source', Target = 'target',
Value = 'value', NodeID = 'name', Group = 'group', opacity = 0.6)
datatable(iris)
plot(iris)
plot(Nile)
data()
plot(BOD)
plot(BOD, type = 1)
plot(BOD, type = '1')
plot(BOD, type = 'l')
barplot(BOD)
str(BOD)
BOD
str(BOD$demand)
str(BOD$Time)
